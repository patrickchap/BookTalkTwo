// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: book_queries.sql

package db

import (
	"context"
	"database/sql"
)

const createBookComment = `-- name: CreateBookComment :one
INSERT INTO book_comments (book_id, user_id, content)
VALUES (?, ?, ?)
RETURNING id, book_id, user_id, content, created_at
`

type CreateBookCommentParams struct {
	BookID  string `json:"book_id"`
	UserID  int64  `json:"user_id"`
	Content string `json:"content"`
}

func (q *Queries) CreateBookComment(ctx context.Context, arg CreateBookCommentParams) (BookComment, error) {
	row := q.db.QueryRowContext(ctx, createBookComment, arg.BookID, arg.UserID, arg.Content)
	var i BookComment
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const getBookById = `-- name: GetBookById :one
SELECT id, book_id, user_id, content, created_at FROM book_comments
WHERE book_id = ? LIMIT 1
`

func (q *Queries) GetBookById(ctx context.Context, bookID string) (BookComment, error) {
	row := q.db.QueryRowContext(ctx, getBookById, bookID)
	var i BookComment
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.UserID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const getBookComments = `-- name: GetBookComments :many
SELECT 
    book_comments.id AS comment_id,
    book_comments.book_id,
    book_comments.content AS comment_content,
    book_comments.created_at AS comment_created_at,
    users.id AS user_id,
    users.username,
    users.first_name,
    users.last_name,
    users.full_name,
    users.email,
    users.picture,
    users.created_at AS user_created_at
FROM 
    book_comments
JOIN 
    users ON book_comments.user_id = users.id
WHERE 
    book_comments.book_id = ?
ORDER BY 
    book_comments.created_at DESC
`

type GetBookCommentsRow struct {
	CommentID        int64        `json:"comment_id"`
	BookID           string       `json:"book_id"`
	CommentContent   string       `json:"comment_content"`
	CommentCreatedAt sql.NullTime `json:"comment_created_at"`
	UserID           int64        `json:"user_id"`
	Username         string       `json:"username"`
	FirstName        string       `json:"first_name"`
	LastName         string       `json:"last_name"`
	FullName         string       `json:"full_name"`
	Email            string       `json:"email"`
	Picture          string       `json:"picture"`
	UserCreatedAt    sql.NullTime `json:"user_created_at"`
}

func (q *Queries) GetBookComments(ctx context.Context, bookID string) ([]GetBookCommentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getBookComments, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetBookCommentsRow{}
	for rows.Next() {
		var i GetBookCommentsRow
		if err := rows.Scan(
			&i.CommentID,
			&i.BookID,
			&i.CommentContent,
			&i.CommentCreatedAt,
			&i.UserID,
			&i.Username,
			&i.FirstName,
			&i.LastName,
			&i.FullName,
			&i.Email,
			&i.Picture,
			&i.UserCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
